@using BookingSite.ViewModel
@{
  Layout = "_GetTicketLayout";
  ViewData["Title"] = "Đặt vé máy bay";
}
@model SearchFlightViewModel
<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Đặt vé máy bay</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script
    src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<body class="bg-white font-sans">
  <!-- Main Content -->
  <div class="max-w-7xl mx-auto p-6 shadow-lg border mt-10 rounded-xl">
    <!-- Thanh tóm tắt thông tin đặt vé -->
    <div class="relative bg-white shadow rounded-lg p-4 mb-6">
      <div class="flex items-center gap-4 justify-center">
        <span class="font-bold text-2xl text-blue-900">@Model.DepartureCode</span>
        <input type="text" name="" id="departureID" hidden value=@Model.DepartureID>
        <span class="text-gray-400 text-xl">....................✈....................</span>
        <span class="font-bold text-2xl text-blue-900" id="arrivalCode">@Model.ArrivalCode</span>
        <input type="text" name="" id="arrivalID" hidden value=@Model.ArrivalID>
        <div class="ml-6">
          <div class="text-sm text-gray-500">Khởi hành</div>
          <div class="font-semibold" id="departureDate">@Model.DepartureDate</div>
        </div>
        @if (@Model.ReturnDate != null)
        {
          <div class="ml-6">
            <div class="text-sm text-gray-500">Trở về</div>
            <div class="font-semibold">@Model.ReturnDate</div>
          </div>
        }
        <div class="ml-6">
          <div class="text-sm text-gray-500">Hành khách</div>
          <div class="font-semibold flex items-center">
            <span id="passengerNumber">@Model.PassengerNumber</span>
            <svg class="w-5 h-5 ml-1 text-green-600" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 1114 0H3z" />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Banner chọn chuyến đi -->
  <div class="relative w-full h-48 mt-8 mb-4">
    <!-- Ảnh nền -->
    <img src="/images/banner.jpg" alt="banner" class="w-full h-full object-cover rounded-lg" />
    <!-- Khung trắng nổi bật -->
    <div class="absolute inset-0 flex items-center justify-center">
      <div class="bg-white bg-opacity-95 rounded-xl px-10 py-6 shadow-lg text-center">
        <h2 class="text-2xl md:text-3xl font-bold text-green-700 mb-2">Vui lòng chọn chuyến đi</h2>
        <p class="text-lg text-gray-700">@Model.DepartureCode đến @Model.ArrivalCode</p>
      </div>
    </div>
  </div>
  <!-- Bảng chọn ngày và giá vé -->
  <div class="flex flex-col items-center mt-8">
    <div class="text-2xl font-bold text-blue-900 mb-2">@Model.DepartureDate</div>
    <div class="flex items-center w-full max-w-4xl bg-white rounded-2xl shadow p-6">
      <!-- Nút điều hướng trái -->
      <button id="btnLeft"
        class="bg-green-400 hover:bg-green-500 text-white rounded-full w-10 h-10 flex items-center justify-center shadow flex-shrink-0">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <!-- Thanh ngày và giá vé -->
      <div id="dateScroll" class="flex gap-2 overflow-x-auto px-6 scroll-smooth w-full">
        @foreach (var day in Model.flightsByDateViewModel)
        {
          @if (day.FlightDate == Model.DepartureDate)
          {
            <div
              class="flex flex-col items-center bg-blue-900 rounded-lg px-4 py-2 min-w-[90px] text-white font-bold shadow-lg border-2 border-blue-900"
              data-label="@day.dateName, @day.FlightDate.ToString("dd/MM/yyyy")">
              <span>@day.cheapestPrice VND</span>
              <span class="text-xs mt-1 flex items-center">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="white" />
                  <path stroke="currentColor" stroke-width="2" d="M9 12l2 2 4-4" />
                </svg>
                @day.dateName, @day.FlightDate.ToString("dd/MM/yyyy")
              </span>
            </div>
          }
          else
          {
            <div class="flex flex-col items-center bg-blue-100 rounded-lg px-4 py-2 min-w-[90px] text-blue-900 font-bold"
              data-label="@day.dateName, @day.FlightDate.ToString("dd/MM/yyyy")">
              <span>@day.cheapestPrice VND</span>
              <span class="text-xs mt-1">@day.dateName, @day.FlightDate.ToString("dd/MM/yyyy")</span>
            </div>
          }
        }
      </div>
      <!-- Nút điều hướng phải -->
      <button id="btnRight"
        class="bg-green-400 hover:bg-green-500 text-white rounded-full w-10 h-10 flex items-center justify-center shadow flex-shrink-0">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
    <div class="flex items-center mt-2 text-gray-600">
      <svg class="w-5 h-5 mr-1 text-blue-900" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7l-6 6-2-2" />
      </svg>
      Giá vé rẻ nhất
    </div>
  </div>

  </div> <!-- Bộ lọc và thông báo -->
  <div class="flex items-center justify-between mt-8 mb-2 max-w-4xl mx-auto"> <!-- Filter thời gian bay -->
    <div class="flex items-center gap-4">
      <select id="timeFilter" class="border border-gray-300 rounded-lg px-4 py-2 text-gray-700">
        <option value="">Tất cả thời gian bay</option>
        <option value="morning">Sáng (05:00-11:00)</option>
        <option value="afternoon">Chiều (11:00-17:00)</option>
        <option value="evening">Tối (17:00-23:00)</option>
      </select>
    </div>

    <!-- Sort -->
    <div class="relative text-sm text-gray-600">
      <select id="sortFilter" class="border border-gray-300 rounded-lg px-4 py-2 text-gray-700">
        <option value="price">Giá rẻ nhất</option>
        <option value="early">Khởi hành sớm nhất</option>
        <option value="late">Khởi hành muộn nhất</option>
      </select>
    </div>
  </div>

  <div class="max-w-4xl mx-auto mb-4">
    <div class="text-sm text-blue-900 font-semibold mb-2 flex items-center">
      <svg class="w-4 h-4 mr-1 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="white" />
        <path stroke="currentColor" stroke-width="2" d="M8 12h8" />
      </svg>
      Quý khách có thể sử dụng bộ lọc theo thời gian bay và sắp xếp theo giá hoặc thời gian khởi hành để tìm chuyến bay
      phù hợp nhất.
    </div>
  </div>

  <!-- Danh sách chuyến bay đi -->
  <div class="space-y-6 max-w-4xl mx-auto" id="flightListGo">
  </div>
  <!-- Danh sách chuyến bay về (ẩn ban đầu) -->
  <div class="space-y-6 max-w-4xl mx-auto hidden" id="flightListReturn">
  </div>
  <!-- Nội dung chọn hạng vé mẫu (dùng cho JS) -->
  <template id="economyOptionsTemplate">
    <div class="text-center font-semibold text-lg mb-2">Chọn hạng vé<br><span class="text-sm font-normal">Tiện ích với
        mỗi hành khách.</span></div>
    <div class="flex flex-col md:flex-row gap-6 justify-center">
      <div class="ticket-class-option border rounded-xl p-6 flex-1 max-w-md bg-white cursor-pointer"
        data-class="Economy">
        <div class="text-center font-semibold mb-4">Economy Class</div>
        <ul class="text-sm space-y-2">
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hành lý xách tay: 7kg</li>
          <li class="flex items-center"><span class="text-red-600 mr-2">✖</span>Không bao gồm hành lý ký gửi</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hoàn/hủy trước giờ khởi hành: 450.000
            VND (*)</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hoàn/hủy sau giờ khởi hành: 600.000
            VND (*)</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Thay đổi trước giờ khởi hành: 450.000
            VND (*)</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Thay đổi sau giờ khởi hành: 600.000
            VND (*)</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hệ số cộng điểm Bamboo Club: 0.5</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Chọn ghế ngồi mất phí</li>
          <li class="flex items-center"><span class="text-red-600 mr-2">✖</span>Không áp dụng cho go-show</li>
        </ul>
        <a href="#" class="block text-green-700 font-semibold mt-2 hover:underline text-sm">Xem chi tiết</a>
      </div>
    </div>
    <div class="flex justify-center mt-6 hidden" id="confirmBtnWrapper">
      <button id="confirmTicketBtn"
        class="bg-green-700 hover:bg-green-800 text-white font-bold py-3 px-8 rounded-lg shadow transition">Xác nhận và
        tiếp tục</button>
    </div>
  </template>
  <template id="businessOptionsTemplate">
    <div class="text-center font-semibold text-lg mb-2">Chọn hạng vé<br><span class="text-sm font-normal">Tiện ích với
        mỗi hành khách.</span></div>
    <div class="flex flex-col md:flex-row gap-6 justify-center">
      <div class="ticket-class-option border rounded-xl p-6 flex-1 max-w-md bg-white cursor-pointer"
        data-class="Business">
        <div class="text-center font-semibold mb-4">Business Class</div>
        <ul class="text-sm space-y-2">
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hành lý xách tay: 14kg</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>02 kiện hành lý ký gửi 32kg</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hoàn/hủy miễn phí</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Thay đổi miễn phí</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Hệ số cộng điểm Bamboo Club: 2.00</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Chọn ghế ngồi miễn phí</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Đổi chuyến tại sân bay miễn phí</li>
          <li class="flex items-center"><span class="text-green-600 mr-2">✔</span>Ưu tiên làm thủ tục, lên máy bay, hành
            lý</li>
        </ul>
        <a href="#" class="block text-green-700 font-semibold mt-2 hover:underline text-sm">Xem chi tiết</a>
      </div>
    </div>

    <div class="flex justify-center mt-6 hidden" id="confirmBtnWrapper">
      <button id="confirmTicketBtn"
        class="bg-green-700 hover:bg-green-800 text-white font-bold py-3 px-8 rounded-lg shadow transition">Xác nhận và
        tiếp tục</button>
    </div>
  </template>
  <div class="flex justify-center mt-10 mb-8">
    <a href="/" class="bg-gray-200 hover:bg-gray-300 text-blue-900 font-bold py-3 px-8 rounded-lg shadow transition">
      ← Quay lại trang chủ
    </a>
  </div>
  </div>

  <script src="~/js/GetTicket/GetTicket.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const scrollDiv = document.getElementById('dateScroll');
      const btnLeft = document.getElementById('btnLeft');
      const btnRight = document.getElementById('btnRight');
      const scrollAmount = 200; // px, có thể chỉnh cho phù hợp

      btnLeft.addEventListener('click', function () {
        scrollDiv.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      });

      btnRight.addEventListener('click', function () {
        scrollDiv.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      });
    });
  </script>


  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const btnFilter = document.getElementById('btnFilter');
      const filterPanel = document.getElementById('filterPanel');
      const filterOverlay = document.getElementById('filterOverlay');
      const closeFilter = document.getElementById('closeFilter');
      const allAirlines = document.getElementById('allAirlines');
      const airlinesList = document.getElementById('airlinesList');

      if (btnFilter && filterPanel && filterOverlay && closeFilter) {
        btnFilter.addEventListener('click', function () {
          filterPanel.classList.remove('translate-x-full');
          filterOverlay.classList.remove('hidden');
        });
        closeFilter.addEventListener('click', function () {
          filterPanel.classList.add('translate-x-full');
          filterOverlay.classList.add('hidden');
        });
        filterOverlay.addEventListener('click', function () {
          filterPanel.classList.add('translate-x-full');
          filterOverlay.classList.add('hidden');
        });
      }
      if (allAirlines && airlinesList) {
        allAirlines.addEventListener('change', function () {
          if (this.checked) {
            airlinesList.classList.add('hidden');
          } else {
            airlinesList.classList.remove('hidden');
          }
        });
      }
      // Ngân sách: cập nhật số tiền khi kéo
      const budgetRange = document.getElementById('budgetRange');
      const budgetValue = document.getElementById('budgetValue');
      if (budgetRange && budgetValue) {
        function formatMoney(v) {
          return Number(v).toLocaleString('vi-VN') + ' VND';
        }
        budgetValue.textContent = formatMoney(budgetRange.value);
        budgetRange.addEventListener('input', function () {
          budgetValue.textContent = formatMoney(this.value);
        });
      }
    });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const sortDropdownBtn = document.getElementById('sortDropdownBtn');
      const sortDropdownMenu = document.getElementById('sortDropdownMenu');
      const sortSelected = document.getElementById('sortSelected');
      const sortDropdownWrapper = document.getElementById('sortDropdownWrapper');

      if (sortDropdownBtn && sortDropdownMenu && sortSelected && sortDropdownWrapper) {
        // Toggle dropdown
        sortDropdownBtn.addEventListener('click', function (e) {
          e.stopPropagation();
          sortDropdownMenu.classList.toggle('hidden');
        });

        // Chọn tiêu chí
        sortDropdownMenu.querySelectorAll('button[data-value]').forEach(btn => {
          btn.addEventListener('click', function () {
            sortSelected.textContent = this.getAttribute('data-value');
            sortDropdownMenu.classList.add('hidden');
            // Highlight lại nút đã chọn
            sortDropdownMenu.querySelectorAll('button').forEach(b => b.classList.remove('text-green-600', 'font-semibold', 'flex', 'items-center'));
            this.classList.add('text-green-600', 'font-semibold', 'flex', 'items-center');
          });
        });

        // Đóng dropdown khi click ra ngoài
        document.addEventListener('click', function (e) {
          if (!sortDropdownWrapper.contains(e.target)) {
            sortDropdownMenu.classList.add('hidden');
          }
        });
      }
    });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const resetFilter = document.getElementById('resetFilter');
      if (resetFilter) {
        resetFilter.addEventListener('click', function (e) {
          e.preventDefault();

          // Reset ngân sách về max
          if (budgetRange && budgetValue) {
            budgetRange.value = budgetRange.max;
            budgetValue.textContent = Number(budgetRange.max).toLocaleString('vi-VN') + ' VND';
          }

          // Reset radio Số điểm dừng, Giờ khởi hành, Giờ đến về 'Không chọn'
          document.querySelectorAll('input[type=radio][name=stop]').forEach(r => r.checked = true);
          document.querySelectorAll('input[type=radio][name=depart]').forEach((r, i) => r.checked = (i === 0));
          document.querySelectorAll('input[type=radio][name=arrive]').forEach((r, i) => r.checked = (i === 0));

          // Reset hãng hàng không: chọn tất cả, ẩn danh sách
          if (allAirlines && airlinesList) {
            allAirlines.checked = true;
            airlinesList.classList.add('hidden');
            airlinesList.querySelectorAll('input[type=checkbox]').forEach(cb => cb.checked = true);
          }

          // Reset dropdown khoang dịch vụ về 'Tất cả'
          const serviceSelect = document.querySelector('select');
          if (serviceSelect) serviceSelect.selectedIndex = 0;
        });
      }
    });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const btnEconomy = document.getElementById('btnEconomy');
      const btnBusiness = document.getElementById('btnBusiness');
      const economyOptions = document.getElementById('economyOptions');
      const businessOptions = document.getElementById('businessOptions');

      if (btnEconomy && btnBusiness && economyOptions && businessOptions) {
        btnEconomy.addEventListener('click', function () {
          economyOptions.classList.remove('hidden');
          businessOptions.classList.add('hidden');
        });
        btnBusiness.addEventListener('click', function () {
          businessOptions.classList.remove('hidden');
          economyOptions.classList.add('hidden');
        });
      }
    });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const economyTemplate = document.getElementById('economyOptionsTemplate');
      const businessTemplate = document.getElementById('businessOptionsTemplate');
      document.querySelectorAll('.btnEconomy, .btnBusiness').forEach(btn => {
        btn.addEventListener('click', function (e) {
          e.stopPropagation();
          const cardId = this.getAttribute('data-card');
          const isEconomy = this.classList.contains('btnEconomy');
          const card = document.querySelector('[data-card="' + cardId + '"]');
          if (card) {
            // Hiệu ứng giao diện nút
            card.querySelectorAll('.btnEconomy, .btnBusiness').forEach(tab => {
              tab.classList.remove('bg-green-700', 'text-white', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg', 'bg-blue-900', 'ring-blue-800', 'text-blue-900', 'text-green-700', 'border-green-700', 'border-blue-900');
              tab.classList.add('bg-white', 'shadow', 'transition');
              if (tab.classList.contains('btnEconomy')) {
                tab.classList.add('text-green-700', 'border-2', 'border-green-700');
              } else {
                tab.classList.add('text-blue-900', 'border-2', 'border-blue-900');
              }
            });
            if (isEconomy) {
              this.classList.remove('bg-white', 'text-green-700', 'border-2', 'border-green-700', 'shadow');
              this.classList.add('bg-green-700', 'text-white', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg');
            } else {
              this.classList.remove('bg-white', 'text-blue-900', 'border-2', 'border-blue-900', 'shadow');
              this.classList.add('bg-blue-900', 'text-white', 'ring-2', 'ring-blue-800', 'z-10', 'shadow-lg');
            }

            // Render lại vùng chọn hạng vé
            document.querySelectorAll('.ticketOptions').forEach(opt => {
              if (opt.getAttribute('data-card') !== cardId) {
                opt.classList.remove('scale-100', 'opacity-100');
                opt.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                  opt.classList.add('hidden');
                }, 300);
              }
            });
            const optionsDiv = document.querySelector('.ticketOptions[data-card="' + cardId + '"]');
            if (optionsDiv) {
              const currentType = optionsDiv.getAttribute('data-type');
              const newType = isEconomy ? 'economy' : 'business';
              if (currentType !== newType || !optionsDiv.innerHTML.trim()) {
                optionsDiv.innerHTML = isEconomy ? economyTemplate.innerHTML : businessTemplate.innerHTML;
                optionsDiv.setAttribute('data-type', newType);
                enableTicketClassSelect(optionsDiv);
              }
              optionsDiv.classList.remove('hidden');
              setTimeout(() => {
                optionsDiv.classList.add('scale-100', 'opacity-100');
                optionsDiv.classList.remove('scale-95', 'opacity-0');
              }, 10);
            }
          }
        });
      });
    });
  </script>
  <script>
    // Thêm hàm enableTicketClassSelect
    function enableTicketClassSelect(optionsDiv) {
      const options = optionsDiv.querySelectorAll('.ticket-class-option');
      const confirmBtnWrapper = optionsDiv.querySelector('#confirmBtnWrapper');
      options.forEach(opt => {
        opt.onclick = function (e) {
          e.stopPropagation();
          options.forEach(o => o.classList.remove('ring-2', 'ring-green-600', 'ring-blue-800', 'shadow-lg', 'bg-green-50'));
          this.classList.add('ring-2', 'ring-green-600', 'shadow-lg', 'bg-green-50');
          optionsDiv.setAttribute('data-selected-class', this.getAttribute('data-class'));
          if (confirmBtnWrapper) confirmBtnWrapper.classList.remove('hidden');
          // Lưu thông tin vé tạm thời vào optionsDiv
          optionsDiv.dataset.selectedClass = this.getAttribute('data-class');
          optionsDiv.dataset.selectedPrice = this.querySelector('.text-2xl')?.textContent?.trim() || '';
        };
      });
      if (confirmBtnWrapper) confirmBtnWrapper.classList.add('hidden');
    }
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const dateCards = document.querySelectorAll('#dateScroll > div');
      const dateTitle = document.querySelector('.text-2xl.font-bold.text-blue-900.mb-2');

      dateCards.forEach(card => {
        card.addEventListener('click', function () {
          // Bỏ highlight các thẻ khác
          dateCards.forEach(c => {
            c.classList.remove('bg-blue-900', 'text-white', 'shadow-lg', 'border-2', 'border-blue-900');
            c.classList.remove('bg-blue-100', 'text-blue-900', 'font-bold');
            // Nếu là ngày có chuyến bay thì trả lại màu xanh nhạt, nếu không thì xám
            if (c.querySelector('span') && c.querySelector('span').textContent.includes('VND')) {
              c.classList.add('bg-blue-100', 'text-blue-900', 'font-bold');
            } else if (c.querySelector('span') && c.querySelector('span').textContent.includes('No flights')) {
              c.classList.add('bg-gray-200');
            } else if (c.querySelector('span') && c.querySelector('span').textContent.includes('Not available')) {
              c.classList.add('bg-gray-200');
            }
          });
          // Highlight thẻ vừa chọn
          this.classList.remove('bg-blue-100', 'text-blue-900', 'font-bold');
          this.classList.add('bg-blue-900', 'text-white', 'shadow-lg', 'border-2', 'border-blue-900');
          // Cập nhật tiêu đề ngày tháng năm phía trên
          if (this.dataset.label) {
            dateTitle.textContent = this.dataset.label;
          }
        });
      });
    });
  </script>


  <script>
    document.addEventListener("DOMContentLoaded", function () {
      let step = 1;
      const btnXoaChang = document.getElementById('btnXoaChang');
      const dsChang = document.getElementById('dsChang');

      // Xử lý nút xóa chặng chính (xóa vé đi/vé về)
      if (btnXoaChang) {
        btnXoaChang.addEventListener('click', function () {
          // Xóa dữ liệu vé đi/vé về trong localStorage
          localStorage.removeItem('veDi');
          localStorage.removeItem('veVe');
          localStorage.removeItem('chonVeDi');
          // Reload lại trang
          window.location.reload();
        });
      }
      const passengerNumber = document.getElementById('passengerNumber').textContent;
      // Xử lý xác nhận vé
      document.body.addEventListener('click', function (e) {
        if (e.target && e.target.id === 'confirmTicketBtn') {
          e.preventDefault();
          // Tìm card đang mở vùng chọn hạng vé
          const optionsDiv = e.target.closest('.ticketOptions');
          if (optionsDiv) {
            // Lấy thông tin chuyến bay từ card cha
            const card = optionsDiv.closest('.flight-card');
            const fareClass = optionsDiv.getAttribute('data-selected-class');
            if (card) {
              const flightId = card.getAttribute('data-flight-id');


              // Tạo object data
              const flightData = {
                flightId: flightId,
                class: fareClass,
                passengerCount: passengerNumber
              };

              // Lưu vào localStorage
              sessionStorage.setItem('selectedFlight', JSON.stringify(flightData));

              @* // Kiểm tra đăng nhập
              const userId = '@Context.Session.GetString("UserID")';
              if (!userId) {
                sessionStorage.setItem('returnUrl', window.location.href);
                window.location.href = '/login';
                return;
              } *@

                // Chuyển trang
                window.location.href = `/get-ticket/passenger-info`;
            }
          }
        }
      });
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const toggle = document.getElementById('allAirlinesToggle');
      const bamboo = document.getElementById('bambooAirways');
      let isOn = true;

      function updateToggleUI() {
        if (isOn) {
          toggle.classList.remove('bg-gray-200');
          toggle.classList.add('bg-green-500');
          toggle.querySelector('span.inline-block').classList.add('translate-x-6');
          toggle.querySelector('span.inline-block').classList.remove('translate-x-1');
          bamboo.checked = true;
        } else {
          toggle.classList.remove('bg-green-500');
          toggle.classList.add('bg-gray-200');
          toggle.querySelector('span.inline-block').classList.remove('translate-x-6');
          toggle.querySelector('span.inline-block').classList.add('translate-x-1');
          bamboo.checked = false;
        }
      }

      toggle.addEventListener('click', function () {
        isOn = !isOn;
        updateToggleUI();
      });

      bamboo.addEventListener('change', function () {
        isOn = bamboo.checked;
        updateToggleUI();
      });

      updateToggleUI();
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Chọn mặc định nút Economy cho mỗi card khi load trang
      document.querySelectorAll('.flight-card').forEach(card => {
        const btnEco = card.querySelector('.btnEconomy');
        if (btnEco) btnEco.click();
      });
    });
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Đặt mặc định: Economy xanh lục, Business xanh dương
      document.querySelectorAll('.flight-card').forEach(card => {
        const btnEco = card.querySelector('.btnEconomy');
        const btnBus = card.querySelector('.btnBusiness');
        if (btnEco) {
          btnEco.classList.remove('bg-white', 'text-green-700', 'border-2', 'border-green-700', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg');
          btnEco.classList.add('bg-green-700', 'text-white', 'border-2', 'border-green-700');
        }
        if (btnBus) {
          btnBus.classList.remove('bg-white', 'text-blue-900', 'border-2', 'border-blue-900', 'ring-2', 'ring-blue-800', 'z-10', 'shadow-lg');
          btnBus.classList.add('bg-blue-900', 'text-white', 'border-2', 'border-blue-900');
        }
      });

      // Khi bấm vào nút, nút đó chuyển trắng, chữ và viền giữ màu gốc
      document.querySelectorAll('.btnEconomy, .btnBusiness').forEach(btn => {
        btn.addEventListener('click', function (e) {
          e.stopPropagation();
          const cardId = this.getAttribute('data-card');
          const isEconomy = this.classList.contains('btnEconomy');
          const card = document.querySelector('[data-card="' + cardId + '"]');
          if (card) {
            card.querySelectorAll('.btnEconomy, .btnBusiness').forEach(tab => {
              if (tab.classList.contains('btnEconomy')) {
                tab.classList.remove('bg-white', 'text-green-700', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg');
                tab.classList.add('bg-green-700', 'text-white', 'border-2', 'border-green-700');
              } else {
                tab.classList.remove('bg-white', 'text-blue-900', 'ring-2', 'ring-blue-800', 'z-10', 'shadow-lg');
                tab.classList.add('bg-blue-900', 'text-white', 'border-2', 'border-blue-900');
              }
            });
            // Nút được bấm chuyển trắng, chữ và viền giữ màu gốc
            if (isEconomy) {
              this.classList.remove('bg-green-700', 'text-white');
              this.classList.add('bg-white', 'text-green-700', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg');
            } else {
              this.classList.remove('bg-blue-900', 'text-white');
              this.classList.add('bg-white', 'text-blue-900', 'ring-2', 'ring-blue-800', 'z-10', 'shadow-lg');
            }
          }
        });
      });
    });
  </script>

  @* Ajax handle get flight by date *@
  <script>
    const departureID = document.getElementById("departureID").value;
    const arrivalID = document.getElementById("arrivalID").value;
    const passengerNumber = document.getElementById("passengerNumber").textContent;
    const departureDate = document.getElementById("departureDate").textContent;

    document.addEventListener('DOMContentLoaded', function () {
      loadFlightsForDate(departureDate, departureID, arrivalID, passengerNumber);

      document.querySelectorAll('[data-label]').forEach(dayElement => {
        dayElement.addEventListener('click', function () {
          console.log("click")
          const flightDate = this.getAttribute('data-label').split(', ')[1];
          loadFlightsForDate(flightDate, departureID, arrivalID, passengerNumber);
        });
      });
    });

    function loadFlightsForDate(date, departureID, arrivalID, passengerNumber) {
      $('#flightListGo').html('<div class="text-center py-4">Đang tải chuyến bay...</div>');

      $.ajax({
        url: '/get-ticket/get-flight-by-date',
        type: 'GET',
        data: {
          date: date,
          departureID: departureID,
          arrivalID: arrivalID,
          passengerNumber: passengerNumber
        },
        dataType: 'json',
        success: function (response) {
          if (response && response.length > 0) {
            renderFlights(response);
          } else {
            $('#flightListGo').html('<div class="text-center py-4">Không có chuyến bay nào trong ngày này.</div>');
          }
        },
        error: function (xhr) {
          $('#flightListGo').html('<div class="text-center py-4 text-red-500">Có lỗi xảy ra khi tải chuyến bay.</div>');
        }
      });
    }
    function renderFlights(flights) {
      let html = '';

      flights.forEach((flight, index) => {
        html += `
        <div class="flight-card" data-card="${index + 1}" data-flight-id="${flight.FlightID}">
            <div class="flex flex-col md:flex-row bg-white rounded-xl shadow p-4 items-center justify-between mt-6">
                <div class="flex-1 flex flex-col md:flex-row items-center gap-6">
                    <div class="text-center md:text-left">
                        <div class="text-lg font-bold text-gray-800">${flight.DepartureTime}</div>
                        <div class="text-xs text-gray-500">${flight.DepartureAirport.AirportCode}</div>
                    </div>
                    <div class="flex flex-col items-center">
                        <div class="text-xs text-green-700 font-semibold mb-1">Bay thẳng</div>
                        <div class="w-24 border-t-2 border-dotted border-gray-400 mb-1"></div>
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path d="M2.5 19l19-7-7 7-2-2-7 2z" />
                        </svg>
                    </div>
                    <div class="text-center md:text-left">
                        <div class="text-lg font-bold text-gray-800">${flight.ArrivalTime}</div>
                        <div class="text-xs text-gray-500">${flight.ArrivalAirport.AirportCode}</div>
                    </div>
                    <div class="flex flex-col text-xs text-gray-600 ml-4">
                        <span>✈ ${flight.Plane?.Model || 'Unknown'} được TenPM Airways khai thác.</span>
                    </div>
                </div>
                <div class="flex flex-col md:flex-row items-center gap-2 mt-4 md:mt-0">`;

        flight.FareClasses.forEach(item => {
          if (item.ClassName === 'EconomyClass') {
            html += `
                    <button class="btnEconomy relative bg-white text-green-700 border-2 border-green-700 rounded-lg px-6 py-3 text-center font-bold focus:outline-none transition shadow"
                            data-card="${index + 1}">
                        <span class="block text-xs absolute -top-4 right-2 bg-blue-900 text-white rounded px-2 py-1 text-[10px]">
                            ${item.SeatsAvailable} chỗ còn lại
                        </span>
                        <div>Economy<br><span class="text-lg">${item.Price.toLocaleString('vi-VN')} VND</span></div>
                    </button>`;
          } else if (item.ClassName === 'BusinessClass') {
            html += `
                    <button class="btnBusiness relative bg-white text-blue-900 border-2 border-blue-900 rounded-lg px-6 py-3 text-center font-bold focus:outline-none transition shadow"
                            data-card="${index + 1}">
                        <span class="block text-xs absolute -top-4 right-2 bg-blue-900 text-white rounded px-2 py-1 text-[10px]">
                            ${item.SeatsAvailable} chỗ còn lại
                        </span>
                        <div>Business<br><span class="text-lg">${item.Price.toLocaleString('vi-VN')} VND</span></div>
                    </button>`;
          }
        });

        html += `
                </div>
            </div>
            <div class="ticketOptions hidden mt-8 transition-all duration-300 transform scale-95 opacity-0" 
                 data-card="${index + 1}" data-type="">
            </div>
        </div>`;
      });

      $('#flightListGo').html(html);

      // Áp dụng filter và sort hiện tại nếu có
      const timeFilter = document.getElementById('timeFilter');
      const sortFilter = document.getElementById('sortFilter');

      if (timeFilter && sortFilter) {
        const flights = document.querySelectorAll('.flight-card');
        const timeValue = timeFilter.value;
        const sortValue = sortFilter.value;

        // Tạo mảng các flight để sort
        let flightArray = Array.from(flights);

        // Filter theo thời gian
        if (timeValue) {
          flightArray = flightArray.filter(flight => {
            const departureTime = flight.querySelector('.text-lg.font-bold.text-gray-800').textContent;
            const hour = parseInt(departureTime.split(':')[0]);

            switch (timeValue) {
              case 'morning':
                return hour >= 5 && hour < 11;
              case 'afternoon':
                return hour >= 11 && hour < 17;
              case 'evening':
                return hour >= 17 && hour < 23;
              default:
                return true;
            }
          });
        }

        // Sort theo tiêu chí
        if (sortValue) {
          flightArray.sort((a, b) => {
            const priceA = parseInt(a.querySelector('.btnEconomy .text-lg').textContent.replace(/[^\d]/g, ''));
            const priceB = parseInt(b.querySelector('.btnEconomy .text-lg').textContent.replace(/[^\d]/g, ''));
            const timeA = parseInt(a.querySelector('.text-lg.font-bold.text-gray-800').textContent.split(':').join(''));
            const timeB = parseInt(b.querySelector('.text-lg.font-bold.text-gray-800').textContent.split(':').join(''));

            switch (sortValue) {
              case 'price':
                return priceA - priceB;
              case 'early':
                return timeA - timeB;
              case 'late':
                return timeB - timeA;
              default:
                return 0;
            }
          });
        }

        // Hide tất cả các flight
        flights.forEach(flight => {
          flight.style.display = 'none';
        });

        // Show các flight đã filter và sort
        flightArray.forEach(flight => {
          flight.style.display = 'block';
        });

        // Hiển thị thông báo nếu không có kết quả
        if (flightArray.length === 0) {
          $('#flightListGo').html('<div class="text-center py-4">Không tìm thấy chuyến bay phù hợp với bộ lọc.</div>');
          return; // Thoát hàm vì không cần thêm event listener nữa
        }
      }

      const economyTemplate = document.getElementById('economyOptionsTemplate');
      const businessTemplate = document.getElementById('businessOptionsTemplate');
      document.querySelectorAll('.btnEconomy, .btnBusiness').forEach(btn => {
        btn.addEventListener('click', function (e) {
          e.stopPropagation();
          const cardId = this.getAttribute('data-card');
          const isEconomy = this.classList.contains('btnEconomy');
          const card = document.querySelector('[data-card="' + cardId + '"]');
          if (card) {
            // Hiệu ứng giao diện nút
            card.querySelectorAll('.btnEconomy, .btnBusiness').forEach(tab => {
              tab.classList.remove('bg-green-700', 'text-white', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg', 'bg-blue-900', 'ring-blue-800', 'text-blue-900', 'text-green-700', 'border-green-700', 'border-blue-900');
              tab.classList.add('bg-white', 'shadow', 'transition');
              if (tab.classList.contains('btnEconomy')) {
                tab.classList.add('text-green-700', 'border-2', 'border-green-700');
              } else {
                tab.classList.add('text-blue-900', 'border-2', 'border-blue-900');
              }
            });
            if (isEconomy) {
              this.classList.remove('bg-white', 'text-green-700', 'border-2', 'border-green-700', 'shadow');
              this.classList.add('bg-green-700', 'text-white', 'ring-2', 'ring-green-600', 'z-10', 'shadow-lg');
            } else {
              this.classList.remove('bg-white', 'text-blue-900', 'border-2', 'border-blue-900', 'shadow');
              this.classList.add('bg-blue-900', 'text-white', 'ring-2', 'ring-blue-800', 'z-10', 'shadow-lg');
            }

            // Render lại vùng chọn hạng vé
            document.querySelectorAll('.ticketOptions').forEach(opt => {
              if (opt.getAttribute('data-card') !== cardId) {
                opt.classList.remove('scale-100', 'opacity-100');
                opt.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                  opt.classList.add('hidden');
                }, 300);
              }
            });
            const optionsDiv = document.querySelector('.ticketOptions[data-card="' + cardId + '"]');
            if (optionsDiv) {
              const currentType = optionsDiv.getAttribute('data-type');
              const newType = isEconomy ? 'economy' : 'business';
              if (currentType !== newType || !optionsDiv.innerHTML.trim()) {
                optionsDiv.innerHTML = isEconomy ? economyTemplate.innerHTML : businessTemplate.innerHTML;
                optionsDiv.setAttribute('data-type', newType);
                enableTicketClassSelect(optionsDiv);
              }
              optionsDiv.classList.remove('hidden');
              setTimeout(() => {
                optionsDiv.classList.add('scale-100', 'opacity-100');
                optionsDiv.classList.remove('scale-95', 'opacity-0');
              }, 10);
            }
          }
        });
      });


    }                     
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const timeFilter = document.getElementById('timeFilter');
      const sortFilter = document.getElementById('sortFilter');

      // Xử lý filter và sort khi có thay đổi
      timeFilter.addEventListener('change', applyFiltersAndSort);
      sortFilter.addEventListener('change', applyFiltersAndSort);

      function applyFiltersAndSort() {
        const flights = document.querySelectorAll('.flight-card');
        const timeValue = timeFilter.value;
        const sortValue = sortFilter.value;

        if (!flights.length) return; // Không có chuyến bay để filter

        // Convert NodeList thành Array để dễ xử lý
        let flightArray = Array.from(flights);
        let originalDisplay = new Map(); // Lưu trạng thái hiển thị ban đầu

        // Lưu trạng thái display ban đầu
        flights.forEach(flight => {
          originalDisplay.set(flight, flight.style.display);
        });

        // Filter theo thời gian
        if (timeValue) {
          flightArray = flightArray.filter(flight => {
            const departureTime = flight.querySelector('.text-lg.font-bold.text-gray-800').textContent;
            const hour = parseInt(departureTime.split(':')[0]);

            switch (timeValue) {
              case 'morning':
                return hour >= 5 && hour < 11;
              case 'afternoon':
                return hour >= 11 && hour < 17;
              case 'evening':
                return hour >= 17 && hour < 23;
              default:
                return true;
            }
          });
        }

        // Sort theo tiêu chí
        if (sortValue) {
          flightArray.sort((a, b) => {
            const priceA = parseInt(a.querySelector('.btnEconomy .text-lg').textContent.replace(/[^\d]/g, ''));
            const priceB = parseInt(b.querySelector('.btnEconomy .text-lg').textContent.replace(/[^\d]/g, ''));
            const timeA = parseInt(a.querySelector('.text-lg.font-bold.text-gray-800').textContent.split(':').join(''));
            const timeB = parseInt(b.querySelector('.text-lg.font-bold.text-gray-800').textContent.split(':').join(''));

            switch (sortValue) {
              case 'price':
                return priceA - priceB;
              case 'early':
                return timeA - timeB;
              case 'late':
                return timeB - timeA;
              default:
                return 0;
            }
          });
        }

        // Ẩn tất cả chuyến bay
        flights.forEach(flight => {
          flight.style.display = 'none';
        });

        // Hiển thị các chuyến bay phù hợp theo thứ tự đã sắp xếp
        if (flightArray.length > 0) {
          flightArray.forEach(flight => {
            flight.style.display = originalDisplay.get(flight) || 'block';
          });

          // Sắp xếp lại DOM theo thứ tự đã sort
          const container = document.getElementById('flightListGo');
          flightArray.forEach(flight => {
            container.appendChild(flight);
          });
        } else {
          // Hiển thị thông báo nếu không có kết quả
          const container = document.getElementById('flightListGo');
          container.innerHTML = '<div class="text-center py-4">Không tìm thấy chuyến bay phù hợp với bộ lọc.</div>';
        }
      }
    });
  </script>
</body>

</html>